{
	"name": "moviesDBexists",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "moviesdbip",
						"type": "DatasetReference"
					},
					"name": "moviesdbcsv"
				},
				{
					"dataset": {
						"referenceName": "moviesDBcopyinput",
						"type": "DatasetReference"
					},
					"name": "moviesdbcopycsv"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "moviesdbout",
						"type": "DatasetReference"
					},
					"name": "moviesDBexistes"
				}
			],
			"transformations": [
				{
					"name": "exists1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          movie as string,",
				"          title as string,",
				"          genres as string,",
				"          year as string,",
				"          Rating as string,",
				"          {Rotton Tomato} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> moviesdbcsv",
				"source(output(",
				"          movie as string,",
				"          title as string,",
				"          genres as string,",
				"          year as string,",
				"          Rating as string,",
				"          {Rotton Tomato} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> moviesdbcopycsv",
				"moviesdbcsv, moviesdbcopycsv exists(concat(moviesdbcsv@movie, moviesdbcsv@title) == concat(moviesdbcopycsv@movie, moviesdbcopycsv@title),",
				"     negate:true,",
				"     broadcast: 'auto')~> exists1",
				"exists1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['moviesDBexistes'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> moviesDBexistes"
			]
		}
	}
}